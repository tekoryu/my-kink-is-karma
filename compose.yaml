services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DEV: ${DEV}
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
      - static_volume:/vol/web/static
      - media_volume:/vol/web/media  
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - STATIC_ROOT=${STATIC_ROOT}
      - MEDIA_ROOT=${MEDIA_ROOT}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build:
      context: ./front/vue
      dockerfile: ${FRONTEND_DOCKERFILE:-Dockerfile}
      args:
        NODE_ENV: ${NODE_ENV:-production}
        VITE_API_URL: ${VITE_API_URL:-http://app:8000}
    ports:
      - "${FRONTEND_PORT:-8080}:${FRONTEND_CONTAINER_PORT:-80}"
    volumes:
      - ./front/vue:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - VITE_API_URL=${VITE_API_URL:-http://app:8000}
      - VITE_APP_TITLE=${VITE_APP_TITLE:-My Kink is Karma}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${FRONTEND_CONTAINER_PORT:-80}/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy

volumes:
  postgres_data:
  static_volume:
  media_volume:
